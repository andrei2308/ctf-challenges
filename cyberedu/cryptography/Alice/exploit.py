from collections import Counter

# List of hashes
hashes = [
    "f14fd2705fa37ce36ab73472883cf329917c50eb06d2080f863fd6bf712377b1",
    "ad3b393e6426aef4db1a49180797393a3cb6a7516d1b5f69a3d36138d9be121c",
    "73c370746eb072da5deb8ce13febaa16d33dc714c24a8424018a8a16f46cbdcf",
    "05bac2205f124251c03863a608322b5486c2ba8c1fe0fbaccb1942ed838deb30",
    "312f3b3ef4ce5ef837b1c9837ba8f9ba6f6f21f73eff19ea39e105a1604c61fe",
    "983bd1838b16b697c90731e7602c1a1ce44f4c62032a32f2dfaa50f638f14925",
    "7ec14b2e54a24a7150f121468b5dabb47dd3eb0fbb13ea33b8f7dc171d9fc8ed",
    "313f4b83fbbe56da3a34c0e13fa2e55cf5e5592344c4297b122899629e5290d3",
    "98b1c1348423aa782838204775281aff2e5432782539d3832aa2142b0ca92a34",
    "dc2bc85fa5302c51e919bb59d6eb27dc2a0004b9d867b7505e6528435a16a58a",
    "fe0e584025c1816621aa3c745971c9d9c299733e897d51d6f54cb79ac3770f08",
    "7561b7a5a2348c8bed05b7c9f6e4332718188dc8e0919d1e90bdced42be58476",
    "adc3d4612bd6215627a94b58579ba789003a6faa97566c257d56fdc9a2603290",
    "012f795543d1be84f81584c23b3123365187d52d7abe46cd44c073558534fe62",
    "734ac4a39ee5bc9b6d044c19d9e7c386b7a198d6f188ce48ef04ed0e47d8f35b",
    "3563504f92d40f67f1f8c7a4f57437274b2b1690ad0570b11c9b3f80e6cb5ca7"
]

# Verify all hashes have the same length
hash_length = len(hashes[0])
assert all(len(h) == hash_length for h in hashes), "All hashes must have the same length"

print(f"Analyzing {len(hashes)} hashes of length {hash_length}")
print("=" * 60)

# All possible hexadecimal characters
all_hex_chars = set('0123456789abcdef')

# Analyze each position
unique_chars_by_position = {}

for position in range(hash_length):
    # Extract character at this position from all hashes
    chars_at_position = [h[position] for h in hashes]

    # Count occurrences of each character
    char_counts = Counter(chars_at_position)

    if position < 32:
        # For positions 0-31: Find characters that appear exactly once
        unique_chars = [char for char, count in char_counts.items() if count == 1]
    else:
        # For positions 32+: Find characters that don't appear at all
        chars_present = set(chars_at_position)
        unique_chars = sorted(list(all_hex_chars - chars_present))

    if unique_chars:
        unique_chars_by_position[position] = unique_chars

# Display results
print("\nPositions with unique characters (appearing only once):")
print("-" * 60)

for position in sorted(unique_chars_by_position.keys()):
    unique_chars = unique_chars_by_position[position]
    print(f"Position {position:2d}: {', '.join(unique_chars)}")

# Summary
print("\n" + "=" * 60)
print(f"Total positions analyzed: {hash_length}")
print(f"Positions with unique characters: {len(unique_chars_by_position)}")

# Optional: Build a string from all unique characters in order
if unique_chars_by_position:
    print("\n" + "=" * 60)
    print("Concatenated unique characters (in position order):")
    result = ""
    for position in sorted(unique_chars_by_position.keys()):
        result += "".join(unique_chars_by_position[position])
    print(result)